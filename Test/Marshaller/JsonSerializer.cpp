/*
	ReflectionCodeGenerator for Marshaller
*/
// File has been generated by ReflectionCodeGenerator version 1.18 build 46, at 2020_10_18 14:38:07.309
	
#include "Base/Common/JsonSerializer.h"
#include "Base/Common/JsonPopMaster.h"
#include "Base/Common/JsonPushMaster.h"
#include "Base/Common/SingletonManager.h"
#include "Base/Common/RunTimeTypeIndex.h"
#include "CustomJsonSerializator.h"

using namespace nsJson;

using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

std::map<std::string, TJsonSerializer::TypeFunc> TJsonSerializer::mTypeNameFuncsMap;
std::vector<TJsonSerializer::TypeFunc> TJsonSerializer::mTypeFuncVector;

void TJsonSerializer::Init()
{
    static bool isNeedInit = true;
    if ( !isNeedInit ) {
        return;
    }
    isNeedInit = false;
    
    auto globalTypeIdentifier = SingletonManager()->Get<TRunTimeTypeIndex<>>();
    TypeFunc _TFloat3TypeFunc;
    _TFloat3TypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<TFloat3>((TFloat3*) p, str);
    };
    _TFloat3TypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<TFloat3>((TFloat3*&) p, str, err);
    };
    _TFloat3TypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<TFloat3>((TFloat3*) p, str, err);
    };
    _TFloat3TypeFunc.typeIdentifier = globalTypeIdentifier->type<TFloat3>();
    mTypeNameFuncsMap.insert({"TFloat3", _TFloat3TypeFunc });
    
    TypeFunc _TFloat4TypeFunc;
    _TFloat4TypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<TFloat4>((TFloat4*) p, str);
    };
    _TFloat4TypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<TFloat4>((TFloat4*&) p, str, err);
    };
    _TFloat4TypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<TFloat4>((TFloat4*) p, str, err);
    };
    _TFloat4TypeFunc.typeIdentifier = globalTypeIdentifier->type<TFloat4>();
    mTypeNameFuncsMap.insert({"TFloat4", _TFloat4TypeFunc });
    
    TypeFunc _TParamClassTypeFunc;
    _TParamClassTypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<TParamClass>((TParamClass*) p, str);
    };
    _TParamClassTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<TParamClass>((TParamClass*&) p, str, err);
    };
    _TParamClassTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<TParamClass>((TParamClass*) p, str, err);
    };
    _TParamClassTypeFunc.typeIdentifier = globalTypeIdentifier->type<TParamClass>();
    mTypeNameFuncsMap.insert({"TParamClass", _TParamClassTypeFunc });
    
    TypeFunc _TSimpleComponentTypeFunc;
    _TSimpleComponentTypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<TSimpleComponent>((TSimpleComponent*) p, str);
    };
    _TSimpleComponentTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<TSimpleComponent>((TSimpleComponent*&) p, str, err);
    };
    _TSimpleComponentTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<TSimpleComponent>((TSimpleComponent*) p, str, err);
    };
    _TSimpleComponentTypeFunc.typeIdentifier = globalTypeIdentifier->type<TSimpleComponent>();
    mTypeNameFuncsMap.insert({"TSimpleComponent", _TSimpleComponentTypeFunc });
    
    TypeFunc _TTestClassTypeFunc;
    _TTestClassTypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<TTestClass>((TTestClass*) p, str);
    };
    _TTestClassTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<TTestClass>((TTestClass*&) p, str, err);
    };
    _TTestClassTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<TTestClass>((TTestClass*) p, str, err);
    };
    _TTestClassTypeFunc.typeIdentifier = globalTypeIdentifier->type<TTestClass>();
    mTypeNameFuncsMap.insert({"TTestClass", _TTestClassTypeFunc });
    
    TypeFunc _nsBS_TBaseStructTypeFunc;
    _nsBS_TBaseStructTypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<nsBS::TBaseStruct>((nsBS::TBaseStruct*) p, str);
    };
    _nsBS_TBaseStructTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsBS::TBaseStruct>((nsBS::TBaseStruct*&) p, str, err);
    };
    _nsBS_TBaseStructTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsBS::TBaseStruct>((nsBS::TBaseStruct*) p, str, err);
    };
    _nsBS_TBaseStructTypeFunc.typeIdentifier = globalTypeIdentifier->type<nsBS::TBaseStruct>();
    mTypeNameFuncsMap.insert({"nsBS::TBaseStruct", _nsBS_TBaseStructTypeFunc });
    
    TypeFunc _nsBS_TTestStructTypeFunc;
    _nsBS_TTestStructTypeFunc.serializeFunc = [] (void* p, std::string& str) {
    Serialize<nsBS::TTestStruct>((nsBS::TTestStruct*) p, str);
    };
    _nsBS_TTestStructTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsBS::TTestStruct>((nsBS::TTestStruct*&) p, str, err);
    };
    _nsBS_TTestStructTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsBS::TTestStruct>((nsBS::TTestStruct*) p, str, err);
    };
    _nsBS_TTestStructTypeFunc.typeIdentifier = globalTypeIdentifier->type<nsBS::TTestStruct>();
    mTypeNameFuncsMap.insert({"nsBS::TTestStruct", _nsBS_TTestStructTypeFunc });
    
    
    int max = 0;
    for ( auto& vt : mTypeNameFuncsMap ) {
        max = std::max(vt.second.typeIdentifier, max);
    }
    
    mTypeFuncVector.resize(max + 1);
    for ( auto& vt : mTypeNameFuncsMap ) {
        mTypeFuncVector[vt.second.typeIdentifier] = vt.second;
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::Serialize(void* p, std::string& str, const std::string& typeName)
{
    Init();
    mTypeNameFuncsMap[typeName].serializeFunc(p, str);
}
//---------------------------------------------------------------------------------------
bool TJsonSerializer::Deserialize(void*& p, const std::string& str, const std::string& typeName, std::string& err)
{
    Init();
    return mTypeNameFuncsMap[typeName].deserializeFunc(p, str, err);
}
//---------------------------------------------------------------------------------------
bool TJsonSerializer::Fill(void* p, const std::string& str, const std::string& typeName, std::string& err)
{
    Init();
    return mTypeNameFuncsMap[typeName].fillFunc(p, str, err);
}
void TJsonSerializer::Serialize(void* p, std::string& str, int typeIdentifier)
{
    Init();
    mTypeFuncVector[typeIdentifier].serializeFunc(p, str);
}
//---------------------------------------------------------------------------------------
bool TJsonSerializer::Deserialize(void*& p, const std::string& str, int typeIdentifier, std::string& err)
{
    Init();
    return mTypeFuncVector[typeIdentifier].deserializeFunc(p, str, err);
}
//---------------------------------------------------------------------------------------
bool TJsonSerializer::Fill(void* p, const std::string& str, int typeIdentifier, std::string& err)
{
    Init();
    return mTypeFuncVector[typeIdentifier].fillFunc(p, str, err);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TFloat3* p, Jobj& obj )
{
    PUM::Push( obj, "x", p->x );
    PUM::Push( obj, "y", p->y );
    PUM::Push( obj, "z", p->z );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TFloat3* p, const Jobj& obj )
{
    POM::PopNum( obj, "x", p->x );
    POM::PopNum( obj, "y", p->y );
    POM::PopNum( obj, "z", p->z );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TFloat4* p, Jobj& obj )
{
    PUM::Push( obj, "x", p->x );
    PUM::Push( obj, "y", p->y );
    PUM::Push( obj, "z", p->z );
    PUM::Push( obj, "w", p->w );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TFloat4* p, const Jobj& obj )
{
    POM::PopNum( obj, "x", p->x );
    POM::PopNum( obj, "y", p->y );
    POM::PopNum( obj, "z", p->z );
    POM::PopNum( obj, "w", p->w );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TParamClass* p, Jobj& obj )
{
    PUM::Push( obj, "id", p->id );
    auto pos_o = PUM::AddObject( obj, "pos");
    _Serialize( &(p->pos), pos_o );
    auto rot_o = PUM::AddObject( obj, "rot");
    _Serialize( &(p->rot), rot_o );
    auto vel_o = PUM::AddObject( obj, "vel");
    _Serialize( &(p->vel), vel_o );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TParamClass* p, const Jobj& obj )
{
    POM::PopNum( obj, "id", p->id );
    auto pos_o0 = POM::FindObject(obj, "pos");
    _Deserialize(&(p->pos), pos_o0);
    auto rot_o0 = POM::FindObject(obj, "rot");
    _Deserialize(&(p->rot), rot_o0);
    auto vel_o0 = POM::FindObject(obj, "vel");
    _Deserialize(&(p->vel), vel_o0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TSimpleComponent* p, Jobj& obj )
{
    PUM::Push( obj, "ll", p->ll );
    PUM::Push( obj, "ull", p->ull );
    PUM::Push( obj, "in64", p->in64 );
    PUM::Push( obj, "uin64", p->uin64 );
    PUM::Push( obj, "name", p->name );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TSimpleComponent* p, const Jobj& obj )
{
    POM::PopNum( obj, "ll", p->ll );
    POM::PopNum( obj, "ull", p->ull );
    POM::PopNum( obj, "in64", p->in64 );
    POM::PopNum( obj, "uin64", p->uin64 );
    POM::PopStr( obj, "name", p->name );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestClass* p, Jobj& obj )
{
    PUM::Value vParam_a0(rapidjson::kArrayType);
    for( size_t vParam_i0 = 0 ; vParam_i0 < p->vParam.size() ; vParam_i0++ ) {
        auto& vParam_e0 = p->vParam[vParam_i0];
        PUM::Value vParam_a1(rapidjson::kObjectType);
        auto vParam_c1 = vParam_a1.GetObject();
        _Serialize( &vParam_e0, vParam_c1 );
        PUM::PushBack( vParam_a0, vParam_a1 );
    }
    PUM::Push(obj, "vParam", vParam_a0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestClass* p, const Jobj& obj )
{
    auto vParam_a0 = POM::FindArray(obj, "vParam");
    for( auto& vParam_e0 : vParam_a0 ) {
        auto vParam_o1 = vParam_e0.GetObject();
        TParamClass vParam_c1;
        _Deserialize(&vParam_c1, vParam_o1);
        p->vParam.push_back(vParam_c1);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsBS::TBaseStruct* p, Jobj& obj )
{
    PUM::Push( obj, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsBS::TBaseStruct* p, const Jobj& obj )
{
    POM::PopStr( obj, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsBS::TTestStruct* p, Jobj& obj )
{
    PUM::Push( obj, "password", p->password );
    PUM::Push( obj, "port", p->port );
    PUM::Push( obj, "flag", p->flag );
    PUM::Value strSet_a0(rapidjson::kArrayType);
    for( auto& strSet_e0 : p->strSet ) {
        PUM::PushBack( strSet_a0, strSet_e0 );
    }
    PUM::Push(obj, "strSet", strSet_a0);
    PUM::Value intSet_a0(rapidjson::kArrayType);
    for( auto& intSet_e0 : p->intSet ) {
        PUM::PushBack( intSet_a0, intSet_e0 );
    }
    PUM::Push(obj, "intSet", intSet_a0);
    PUM::Value boolList_a0(rapidjson::kArrayType);
    for( auto& boolList_e0 : p->boolList ) {
        PUM::PushBack( boolList_a0, boolList_e0 );
    }
    PUM::Push(obj, "boolList", boolList_a0);
    PUM::Value numList_a0(rapidjson::kArrayType);
    for( auto& numList_e0 : p->numList ) {
        PUM::PushBack( numList_a0, numList_e0 );
    }
    PUM::Push(obj, "numList", numList_a0);
    PUM::Value numVector_a0(rapidjson::kArrayType);
    for( size_t numVector_i0 = 0 ; numVector_i0 < p->numVector.size() ; numVector_i0++ ) {
        auto& numVector_e0 = p->numVector[numVector_i0];
        PUM::PushBack( numVector_a0, numVector_e0 );
    }
    PUM::Push(obj, "numVector", numVector_a0);
    PUM::Value strVector_a0(rapidjson::kArrayType);
    for( size_t strVector_i0 = 0 ; strVector_i0 < p->strVector.size() ; strVector_i0++ ) {
        auto& strVector_e0 = p->strVector[strVector_i0];
        PUM::PushBack( strVector_a0, strVector_e0 );
    }
    PUM::Push(obj, "strVector", strVector_a0);
    PUM::Value baseVec_a0(rapidjson::kArrayType);
    for( size_t baseVec_i0 = 0 ; baseVec_i0 < p->baseVec.size() ; baseVec_i0++ ) {
        auto& baseVec_e0 = p->baseVec[baseVec_i0];
    }
    PUM::Push(obj, "baseVec", baseVec_a0);
    PUM::Value basePtrVec_a0(rapidjson::kArrayType);
    for( size_t basePtrVec_i0 = 0 ; basePtrVec_i0 < p->basePtrVec.size() ; basePtrVec_i0++ ) {
        auto& basePtrVec_e0 = p->basePtrVec[basePtrVec_i0];
    }
    PUM::Push(obj, "basePtrVec", basePtrVec_a0);
    PUM::Value baseSPVec_a0(rapidjson::kArrayType);
    for( size_t baseSPVec_i0 = 0 ; baseSPVec_i0 < p->baseSPVec.size() ; baseSPVec_i0++ ) {
        auto& baseSPVec_e0 = p->baseSPVec[baseSPVec_i0];
    }
    PUM::Push(obj, "baseSPVec", baseSPVec_a0);
    auto intIntMap_c0 = PUM::AddObject(obj, "intIntMap");
    for( auto& intIntMap_e0 : p->intIntMap ) {
        PUM::Push( intIntMap_c0, PUM::ConvertToString(intIntMap_e0.first).data(), intIntMap_e0.second );
    }
    auto intBoolMap_c0 = PUM::AddObject(obj, "intBoolMap");
    for( auto& intBoolMap_e0 : p->intBoolMap ) {
        PUM::Push( intBoolMap_c0, PUM::ConvertToString(intBoolMap_e0.first).data(), intBoolMap_e0.second );
    }
    auto intStrMap_c0 = PUM::AddObject(obj, "intStrMap");
    for( auto& intStrMap_e0 : p->intStrMap ) {
        PUM::Push( intStrMap_c0, PUM::ConvertToString(intStrMap_e0.first).data(), intStrMap_e0.second );
    }
    auto strStrMap_c0 = PUM::AddObject(obj, "strStrMap");
    for( auto& strStrMap_e0 : p->strStrMap ) {
        PUM::Push( strStrMap_c0, PUM::ConvertToString(strStrMap_e0.first).data(), strStrMap_e0.second );
    }
    auto strIntMap_c0 = PUM::AddObject(obj, "strIntMap");
    for( auto& strIntMap_e0 : p->strIntMap ) {
        PUM::Push( strIntMap_c0, PUM::ConvertToString(strIntMap_e0.first).data(), strIntMap_e0.second );
    }
    auto strBoolMap_c0 = PUM::AddObject(obj, "strBoolMap");
    for( auto& strBoolMap_e0 : p->strBoolMap ) {
        PUM::Push( strBoolMap_c0, PUM::ConvertToString(strBoolMap_e0.first).data(), strBoolMap_e0.second );
    }
    auto strBaseMap_c0 = PUM::AddObject(obj, "strBaseMap");
    for( auto& strBaseMap_e0 : p->strBaseMap ) {
    }
    auto strBasePtrMap_c0 = PUM::AddObject(obj, "strBasePtrMap");
    for( auto& strBasePtrMap_e0 : p->strBasePtrMap ) {
    }
    auto strBaseSPMap_c0 = PUM::AddObject(obj, "strBaseSPMap");
    for( auto& strBaseSPMap_e0 : p->strBaseSPMap ) {
    }
    auto intBaseMap_c0 = PUM::AddObject(obj, "intBaseMap");
    for( auto& intBaseMap_e0 : p->intBaseMap ) {
    }
    auto intBasePtrMap_c0 = PUM::AddObject(obj, "intBasePtrMap");
    for( auto& intBasePtrMap_e0 : p->intBasePtrMap ) {
    }
    auto intBaseSPMap_c0 = PUM::AddObject(obj, "intBaseSPMap");
    for( auto& intBaseSPMap_e0 : p->intBaseSPMap ) {
    }
    PUM::Value intArrArr_a0(rapidjson::kArrayType);
    for( size_t intArrArr_i0 = 0 ; intArrArr_i0 < p->intArrArr.size() ; intArrArr_i0++ ) {
        auto& intArrArr_e0 = p->intArrArr[intArrArr_i0];
        PUM::Value intArrArr_a1(rapidjson::kArrayType);
        for( size_t intArrArr_i1 = 0 ; intArrArr_i1 < intArrArr_e0.size() ; intArrArr_i1++ ) {
            auto& intArrArr_e1 = intArrArr_e0[intArrArr_i1];
            PUM::PushBack( intArrArr_a1, intArrArr_e1 );
        }
        PUM::PushBack(intArrArr_a0, intArrArr_a1);
    }
    PUM::Push(obj, "intArrArr", intArrArr_a0);
    PUM::Value strArrArr_a0(rapidjson::kArrayType);
    for( size_t strArrArr_i0 = 0 ; strArrArr_i0 < p->strArrArr.size() ; strArrArr_i0++ ) {
        auto& strArrArr_e0 = p->strArrArr[strArrArr_i0];
        PUM::Value strArrArr_a1(rapidjson::kArrayType);
        for( size_t strArrArr_i1 = 0 ; strArrArr_i1 < strArrArr_e0.size() ; strArrArr_i1++ ) {
            auto& strArrArr_e1 = strArrArr_e0[strArrArr_i1];
            PUM::PushBack( strArrArr_a1, strArrArr_e1 );
        }
        PUM::PushBack(strArrArr_a0, strArrArr_a1);
    }
    PUM::Push(obj, "strArrArr", strArrArr_a0);
    auto strArrMap_c0 = PUM::AddObject(obj, "strArrMap");
    for( auto& strArrMap_e0 : p->strArrMap ) {
        PUM::Value strArrMap_a1(rapidjson::kArrayType);
        for( size_t strArrMap_i1 = 0 ; strArrMap_i1 < strArrMap_e0.second.size() ; strArrMap_i1++ ) {
            auto& strArrMap_e1 = strArrMap_e0.second[strArrMap_i1];
            PUM::PushBack( strArrMap_a1, strArrMap_e1 );
        }
        PUM::Push(strArrMap_c0, PUM::ConvertToString(strArrMap_e0.first).data(), strArrMap_a1);
    }
    PUM::Value strMapArr_a0(rapidjson::kArrayType);
    for( size_t strMapArr_i0 = 0 ; strMapArr_i0 < p->strMapArr.size() ; strMapArr_i0++ ) {
        auto& strMapArr_e0 = p->strMapArr[strMapArr_i0];
        PUM::Value strMapArr_a1(rapidjson::kObjectType);
        auto strMapArr_c1 = strMapArr_a1.GetObject();
        for( auto& strMapArr_e1 : strMapArr_e0 ) {
            PUM::Push( strMapArr_c1, PUM::ConvertToString(strMapArr_e1.first).data(), strMapArr_e1.second );
        }
    }
    PUM::Push(obj, "strMapArr", strMapArr_a0);
    auto strMapMap_c0 = PUM::AddObject(obj, "strMapMap");
    for( auto& strMapMap_e0 : p->strMapMap ) {
        auto strMapMap_c1 = PUM::AddObject(strMapMap_c0, PUM::ConvertToString(strMapMap_e0.first).data());
        for( auto& strMapMap_e1 : strMapMap_e0.second ) {
            PUM::Push( strMapMap_c1, PUM::ConvertToString(strMapMap_e1.first).data(), strMapMap_e1.second );
        }
    }
    PUM::Value objArrArr_a0(rapidjson::kArrayType);
    for( size_t objArrArr_i0 = 0 ; objArrArr_i0 < p->objArrArr.size() ; objArrArr_i0++ ) {
        auto& objArrArr_e0 = p->objArrArr[objArrArr_i0];
        PUM::Value objArrArr_a1(rapidjson::kArrayType);
        for( size_t objArrArr_i1 = 0 ; objArrArr_i1 < objArrArr_e0.size() ; objArrArr_i1++ ) {
            auto& objArrArr_e1 = objArrArr_e0[objArrArr_i1];
        }
        PUM::PushBack(objArrArr_a0, objArrArr_a1);
    }
    PUM::Push(obj, "objArrArr", objArrArr_a0);
    PUM::Value ptrObjArrArr_a0(rapidjson::kArrayType);
    for( size_t ptrObjArrArr_i0 = 0 ; ptrObjArrArr_i0 < p->ptrObjArrArr.size() ; ptrObjArrArr_i0++ ) {
        auto& ptrObjArrArr_e0 = p->ptrObjArrArr[ptrObjArrArr_i0];
        PUM::Value ptrObjArrArr_a1(rapidjson::kArrayType);
        for( size_t ptrObjArrArr_i1 = 0 ; ptrObjArrArr_i1 < ptrObjArrArr_e0.size() ; ptrObjArrArr_i1++ ) {
            auto& ptrObjArrArr_e1 = ptrObjArrArr_e0[ptrObjArrArr_i1];
        }
        PUM::PushBack(ptrObjArrArr_a0, ptrObjArrArr_a1);
    }
    PUM::Push(obj, "ptrObjArrArr", ptrObjArrArr_a0);
    PUM::Value spObjArrArr_a0(rapidjson::kArrayType);
    for( size_t spObjArrArr_i0 = 0 ; spObjArrArr_i0 < p->spObjArrArr.size() ; spObjArrArr_i0++ ) {
        auto& spObjArrArr_e0 = p->spObjArrArr[spObjArrArr_i0];
        PUM::Value spObjArrArr_a1(rapidjson::kArrayType);
        for( size_t spObjArrArr_i1 = 0 ; spObjArrArr_i1 < spObjArrArr_e0.size() ; spObjArrArr_i1++ ) {
            auto& spObjArrArr_e1 = spObjArrArr_e0[spObjArrArr_i1];
        }
        PUM::PushBack(spObjArrArr_a0, spObjArrArr_a1);
    }
    PUM::Push(obj, "spObjArrArr", spObjArrArr_a0);
    PUM::Value objMapArr_a0(rapidjson::kArrayType);
    for( size_t objMapArr_i0 = 0 ; objMapArr_i0 < p->objMapArr.size() ; objMapArr_i0++ ) {
        auto& objMapArr_e0 = p->objMapArr[objMapArr_i0];
        PUM::Value objMapArr_a1(rapidjson::kObjectType);
        auto objMapArr_c1 = objMapArr_a1.GetObject();
        for( auto& objMapArr_e1 : objMapArr_e0 ) {
        }
    }
    PUM::Push(obj, "objMapArr", objMapArr_a0);
    PUM::Value ptrObjMapArr_a0(rapidjson::kArrayType);
    for( size_t ptrObjMapArr_i0 = 0 ; ptrObjMapArr_i0 < p->ptrObjMapArr.size() ; ptrObjMapArr_i0++ ) {
        auto& ptrObjMapArr_e0 = p->ptrObjMapArr[ptrObjMapArr_i0];
        PUM::Value ptrObjMapArr_a1(rapidjson::kObjectType);
        auto ptrObjMapArr_c1 = ptrObjMapArr_a1.GetObject();
        for( auto& ptrObjMapArr_e1 : ptrObjMapArr_e0 ) {
        }
    }
    PUM::Push(obj, "ptrObjMapArr", ptrObjMapArr_a0);
    PUM::Value spObjMapArr_a0(rapidjson::kArrayType);
    for( size_t spObjMapArr_i0 = 0 ; spObjMapArr_i0 < p->spObjMapArr.size() ; spObjMapArr_i0++ ) {
        auto& spObjMapArr_e0 = p->spObjMapArr[spObjMapArr_i0];
        PUM::Value spObjMapArr_a1(rapidjson::kObjectType);
        auto spObjMapArr_c1 = spObjMapArr_a1.GetObject();
        for( auto& spObjMapArr_e1 : spObjMapArr_e0 ) {
        }
    }
    PUM::Push(obj, "spObjMapArr", spObjMapArr_a0);
    auto objMapMap_c0 = PUM::AddObject(obj, "objMapMap");
    for( auto& objMapMap_e0 : p->objMapMap ) {
        auto objMapMap_c1 = PUM::AddObject(objMapMap_c0, PUM::ConvertToString(objMapMap_e0.first).data());
        for( auto& objMapMap_e1 : objMapMap_e0.second ) {
        }
    }
    auto ptrObjMapMap_c0 = PUM::AddObject(obj, "ptrObjMapMap");
    for( auto& ptrObjMapMap_e0 : p->ptrObjMapMap ) {
        auto ptrObjMapMap_c1 = PUM::AddObject(ptrObjMapMap_c0, PUM::ConvertToString(ptrObjMapMap_e0.first).data());
        for( auto& ptrObjMapMap_e1 : ptrObjMapMap_e0.second ) {
        }
    }
    auto spObjMapMap_c0 = PUM::AddObject(obj, "spObjMapMap");
    for( auto& spObjMapMap_e0 : p->spObjMapMap ) {
        auto spObjMapMap_c1 = PUM::AddObject(spObjMapMap_c0, PUM::ConvertToString(spObjMapMap_e0.first).data());
        for( auto& spObjMapMap_e1 : spObjMapMap_e0.second ) {
        }
    }
    auto colossalMember_c0 = PUM::AddObject(obj, "colossalMember");
    for( auto& colossalMember_e0 : p->colossalMember ) {
        PUM::Value colossalMember_a1(rapidjson::kArrayType);
        for( size_t colossalMember_i1 = 0 ; colossalMember_i1 < colossalMember_e0.second.size() ; colossalMember_i1++ ) {
            auto& colossalMember_e1 = colossalMember_e0.second[colossalMember_i1];
            PUM::Value colossalMember_a2(rapidjson::kObjectType);
            auto colossalMember_c2 = colossalMember_a2.GetObject();
            for( auto& colossalMember_e2 : colossalMember_e1 ) {
                PUM::Value colossalMember_a3(rapidjson::kArrayType);
                for( size_t colossalMember_i3 = 0 ; colossalMember_i3 < colossalMember_e2.second.size() ; colossalMember_i3++ ) {
                    auto& colossalMember_e3 = colossalMember_e2.second[colossalMember_i3];
                    PUM::Value colossalMember_a4(rapidjson::kObjectType);
                    auto colossalMember_c4 = colossalMember_a4.GetObject();
                    for( auto& colossalMember_e4 : colossalMember_e3 ) {
                        auto colossalMember_c5 = PUM::AddObject(colossalMember_c4, PUM::ConvertToString(colossalMember_e4.first).data());
                        for( auto& colossalMember_e5 : colossalMember_e4.second ) {
                            PUM::Value colossalMember_a6(rapidjson::kArrayType);
                            for( size_t colossalMember_i6 = 0 ; colossalMember_i6 < colossalMember_e5.second.size() ; colossalMember_i6++ ) {
                                auto& colossalMember_e6 = colossalMember_e5.second[colossalMember_i6];
                                PUM::Value colossalMember_a7(rapidjson::kArrayType);
                                for( size_t colossalMember_i7 = 0 ; colossalMember_i7 < colossalMember_e6.size() ; colossalMember_i7++ ) {
                                    auto& colossalMember_e7 = colossalMember_e6[colossalMember_i7];
                                    PUM::PushBack( colossalMember_a7, colossalMember_e7 );
                                }
                                PUM::PushBack(colossalMember_a6, colossalMember_a7);
                            }
                            PUM::Push(colossalMember_c5, PUM::ConvertToString(colossalMember_e5.first).data(), colossalMember_a6);
                        }
                    }
                }
                PUM::Push(colossalMember_c2, PUM::ConvertToString(colossalMember_e2.first).data(), colossalMember_a3);
            }
        }
        PUM::Push(colossalMember_c0, PUM::ConvertToString(colossalMember_e0.first).data(), colossalMember_a1);
    }
    auto intSuperMap_c0 = PUM::AddObject(obj, "intSuperMap");
    for( auto& intSuperMap_e0 : p->intSuperMap ) {
        auto intSuperMap_c1 = PUM::AddObject(intSuperMap_c0, PUM::ConvertToString(intSuperMap_e0.first).data());
        for( auto& intSuperMap_e1 : intSuperMap_e0.second ) {
            auto intSuperMap_c2 = PUM::AddObject(intSuperMap_c1, PUM::ConvertToString(intSuperMap_e1.first).data());
            for( auto& intSuperMap_e2 : intSuperMap_e1.second ) {
                auto intSuperMap_c3 = PUM::AddObject(intSuperMap_c2, PUM::ConvertToString(intSuperMap_e2.first).data());
                for( auto& intSuperMap_e3 : intSuperMap_e2.second ) {
                    PUM::Push( intSuperMap_c3, PUM::ConvertToString(intSuperMap_e3.first).data(), intSuperMap_e3.second );
                }
            }
        }
    }
    PUM::Value intSuperVec_a0(rapidjson::kArrayType);
    for( size_t intSuperVec_i0 = 0 ; intSuperVec_i0 < p->intSuperVec.size() ; intSuperVec_i0++ ) {
        auto& intSuperVec_e0 = p->intSuperVec[intSuperVec_i0];
        PUM::Value intSuperVec_a1(rapidjson::kArrayType);
        for( size_t intSuperVec_i1 = 0 ; intSuperVec_i1 < intSuperVec_e0.size() ; intSuperVec_i1++ ) {
            auto& intSuperVec_e1 = intSuperVec_e0[intSuperVec_i1];
            PUM::Value intSuperVec_a2(rapidjson::kArrayType);
            for( size_t intSuperVec_i2 = 0 ; intSuperVec_i2 < intSuperVec_e1.size() ; intSuperVec_i2++ ) {
                auto& intSuperVec_e2 = intSuperVec_e1[intSuperVec_i2];
                PUM::Value intSuperVec_a3(rapidjson::kArrayType);
                for( size_t intSuperVec_i3 = 0 ; intSuperVec_i3 < intSuperVec_e2.size() ; intSuperVec_i3++ ) {
                    auto& intSuperVec_e3 = intSuperVec_e2[intSuperVec_i3];
                    PUM::PushBack( intSuperVec_a3, intSuperVec_e3 );
                }
                PUM::PushBack(intSuperVec_a2, intSuperVec_a3);
            }
            PUM::PushBack(intSuperVec_a1, intSuperVec_a2);
        }
        PUM::PushBack(intSuperVec_a0, intSuperVec_a1);
    }
    PUM::Push(obj, "intSuperVec", intSuperVec_a0);
    PUM::Value boolSuperList_a0(rapidjson::kArrayType);
    for( auto& boolSuperList_e0 : p->boolSuperList ) {
        PUM::Value boolSuperList_a1(rapidjson::kArrayType);
        for( auto& boolSuperList_e1 : boolSuperList_e0 ) {
            PUM::Value boolSuperList_a2(rapidjson::kArrayType);
            for( auto& boolSuperList_e2 : boolSuperList_e1 ) {
                PUM::Value boolSuperList_a3(rapidjson::kArrayType);
                for( auto& boolSuperList_e3 : boolSuperList_e2 ) {
                    PUM::PushBack( boolSuperList_a3, boolSuperList_e3 );
                }
                PUM::PushBack(boolSuperList_a2, boolSuperList_a3);
            }
            PUM::PushBack(boolSuperList_a1, boolSuperList_a2);
        }
        PUM::PushBack(boolSuperList_a0, boolSuperList_a1);
    }
    PUM::Push(obj, "boolSuperList", boolSuperList_a0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsBS::TTestStruct* p, const Jobj& obj )
{
    POM::PopStr( obj, "password", p->password );
    POM::PopNum( obj, "port", p->port );
    POM::PopBool( obj, "flag", p->flag );
    if ( POM::IsArray(obj, "strSet") ) {
        auto strSet_a0 = POM::FindArray(obj, "strSet");
        for( auto& strSet_e0 : strSet_a0 ) {
            p->strSet.insert(strSet_e0.GetString());
        }
    } else {
        std::string strSet_t0;
        POM::PopStr(obj, "strSet", strSet_t0);
        p->strSet.insert(strSet_t0);
    }
    if ( POM::IsArray(obj, "intSet") ) {
        auto intSet_a0 = POM::FindArray(obj, "intSet");
        for( auto& intSet_e0 : intSet_a0 ) {
            p->intSet.insert(intSet_e0.GetInt64());
        }
    } else {
        int intSet_t0;
        POM::PopNum(obj, "intSet", intSet_t0);
        p->intSet.insert(intSet_t0);
    }
    if ( POM::IsArray(obj, "boolList") ) {
        auto boolList_a0 = POM::FindArray(obj, "boolList");
        for( auto& boolList_e0 : boolList_a0 ) {
            p->boolList.push_back(boolList_e0.GetBool());
        }
    } else {
        bool boolList_t0;
        POM::PopBool(obj, "boolList", boolList_t0);
        p->boolList.push_back(boolList_t0);
    }
    if ( POM::IsArray(obj, "numList") ) {
        auto numList_a0 = POM::FindArray(obj, "numList");
        for( auto& numList_e0 : numList_a0 ) {
            p->numList.push_back(numList_e0.GetInt64());
        }
    } else {
        int numList_t0;
        POM::PopNum(obj, "numList", numList_t0);
        p->numList.push_back(numList_t0);
    }
    if ( POM::IsArray(obj, "numVector") ) {
        auto numVector_a0 = POM::FindArray(obj, "numVector");
        for( auto& numVector_e0 : numVector_a0 ) {
            p->numVector.push_back(numVector_e0.GetInt64());
        }
    } else {
        int numVector_t0;
        POM::PopNum(obj, "numVector", numVector_t0);
        p->numVector.push_back(numVector_t0);
    }
    if ( POM::IsArray(obj, "strVector") ) {
        auto strVector_a0 = POM::FindArray(obj, "strVector");
        for( auto& strVector_e0 : strVector_a0 ) {
            p->strVector.push_back(strVector_e0.GetString());
        }
    } else {
        std::string strVector_t0;
        POM::PopStr(obj, "strVector", strVector_t0);
        p->strVector.push_back(strVector_t0);
    }
    auto baseVec_a0 = POM::FindArray(obj, "baseVec");
    for( auto& baseVec_e0 : baseVec_a0 ) {
    }
    auto basePtrVec_a0 = POM::FindArray(obj, "basePtrVec");
    for( auto& basePtrVec_e0 : basePtrVec_a0 ) {
    }
    auto baseSPVec_a0 = POM::FindArray(obj, "baseSPVec");
    for( auto& baseSPVec_e0 : baseSPVec_a0 ) {
    }
    auto intIntMap_a0 = POM::FindObject(obj, "intIntMap");
    for( auto& intIntMap_e0 : intIntMap_a0 ) {
        p->intIntMap.insert({ std::stod(intIntMap_e0.name.GetString()), intIntMap_e0.value.GetInt64() });
    }
    auto intBoolMap_a0 = POM::FindObject(obj, "intBoolMap");
    for( auto& intBoolMap_e0 : intBoolMap_a0 ) {
        p->intBoolMap.insert({ std::stod(intBoolMap_e0.name.GetString()), intBoolMap_e0.value.GetBool() });
    }
    auto intStrMap_a0 = POM::FindObject(obj, "intStrMap");
    for( auto& intStrMap_e0 : intStrMap_a0 ) {
        p->intStrMap.insert({ std::stod(intStrMap_e0.name.GetString()), intStrMap_e0.value.GetString() });
    }
    auto strStrMap_a0 = POM::FindObject(obj, "strStrMap");
    for( auto& strStrMap_e0 : strStrMap_a0 ) {
        p->strStrMap.insert({ strStrMap_e0.name.GetString(), strStrMap_e0.value.GetString() });
    }
    auto strIntMap_a0 = POM::FindObject(obj, "strIntMap");
    for( auto& strIntMap_e0 : strIntMap_a0 ) {
        p->strIntMap.insert({ strIntMap_e0.name.GetString(), strIntMap_e0.value.GetInt64() });
    }
    auto strBoolMap_a0 = POM::FindObject(obj, "strBoolMap");
    for( auto& strBoolMap_e0 : strBoolMap_a0 ) {
        p->strBoolMap.insert({ strBoolMap_e0.name.GetString(), strBoolMap_e0.value.GetBool() });
    }
    auto strBaseMap_a0 = POM::FindObject(obj, "strBaseMap");
    for( auto& strBaseMap_e0 : strBaseMap_a0 ) {
    }
    auto strBasePtrMap_a0 = POM::FindObject(obj, "strBasePtrMap");
    for( auto& strBasePtrMap_e0 : strBasePtrMap_a0 ) {
    }
    auto strBaseSPMap_a0 = POM::FindObject(obj, "strBaseSPMap");
    for( auto& strBaseSPMap_e0 : strBaseSPMap_a0 ) {
    }
    auto intBaseMap_a0 = POM::FindObject(obj, "intBaseMap");
    for( auto& intBaseMap_e0 : intBaseMap_a0 ) {
    }
    auto intBasePtrMap_a0 = POM::FindObject(obj, "intBasePtrMap");
    for( auto& intBasePtrMap_e0 : intBasePtrMap_a0 ) {
    }
    auto intBaseSPMap_a0 = POM::FindObject(obj, "intBaseSPMap");
    for( auto& intBaseSPMap_e0 : intBaseSPMap_a0 ) {
    }
    auto intArrArr_a0 = POM::FindArray(obj, "intArrArr");
    for( auto& intArrArr_e0 : intArrArr_a0 ) {
        if ( intArrArr_e0.IsArray() ) {
            std::vector<int> intArrArr_c1;
            auto intArrArr_a1 = intArrArr_e0.GetArray();
            for( auto& intArrArr_e1 : intArrArr_a1 ) {
                intArrArr_c1.push_back(intArrArr_e1.GetInt64());
            }
            p->intArrArr.push_back(intArrArr_c1);
        } else {
            auto intArrArr_t1 = intArrArr_e0.GetInt64();
            std::vector<int> intArrArr_c1;
            intArrArr_c1.push_back(intArrArr_t1);
            p->intArrArr.push_back(intArrArr_c1);
        }
    }
    auto strArrArr_a0 = POM::FindArray(obj, "strArrArr");
    for( auto& strArrArr_e0 : strArrArr_a0 ) {
        if ( strArrArr_e0.IsArray() ) {
            std::vector<std::string> strArrArr_c1;
            auto strArrArr_a1 = strArrArr_e0.GetArray();
            for( auto& strArrArr_e1 : strArrArr_a1 ) {
                strArrArr_c1.push_back(strArrArr_e1.GetString());
            }
            p->strArrArr.push_back(strArrArr_c1);
        } else {
            auto strArrArr_t1 = strArrArr_e0.GetString();
            std::vector<std::string> strArrArr_c1;
            strArrArr_c1.push_back(strArrArr_t1);
            p->strArrArr.push_back(strArrArr_c1);
        }
    }
    auto strArrMap_a0 = POM::FindObject(obj, "strArrMap");
    for( auto& strArrMap_e0 : strArrMap_a0 ) {
        if ( strArrMap_e0.value.IsArray() ) {
            std::vector<std::string> strArrMap_c1;
            auto strArrMap_a1 = strArrMap_e0.value.GetArray();
            for( auto& strArrMap_e1 : strArrMap_a1 ) {
                strArrMap_c1.push_back(strArrMap_e1.GetString());
            }
            p->strArrMap.insert({ strArrMap_e0.name.GetString(), strArrMap_c1 });
        } else {
            auto strArrMap_t1 = strArrMap_e0.value.GetString();
            std::vector<std::string> strArrMap_c1;
            strArrMap_c1.push_back(strArrMap_t1);
            p->strArrMap.insert({ strArrMap_e0.name.GetString(), strArrMap_c1 });
        }
    }
    auto strMapArr_a0 = POM::FindArray(obj, "strMapArr");
    for( auto& strMapArr_e0 : strMapArr_a0 ) {
        std::map<std::string,std::string> strMapArr_c1;
        auto strMapArr_a1 = strMapArr_e0.GetObject();
        for( auto& strMapArr_e1 : strMapArr_a1 ) {
            strMapArr_c1.insert({ strMapArr_e1.name.GetString(), strMapArr_e1.value.GetString() });
        }
        p->strMapArr.push_back(strMapArr_c1);
    }
    auto strMapMap_a0 = POM::FindObject(obj, "strMapMap");
    for( auto& strMapMap_e0 : strMapMap_a0 ) {
        std::map<std::string,std::string> strMapMap_c1;
        auto strMapMap_a1 = strMapMap_e0.value.GetObject();
        for( auto& strMapMap_e1 : strMapMap_a1 ) {
            strMapMap_c1.insert({ strMapMap_e1.name.GetString(), strMapMap_e1.value.GetString() });
        }
        p->strMapMap.insert({ strMapMap_e0.name.GetString(), strMapMap_c1 });
    }
    auto objArrArr_a0 = POM::FindArray(obj, "objArrArr");
    for( auto& objArrArr_e0 : objArrArr_a0 ) {
        std::vector<nsBS::TBaseStruct> objArrArr_c1;
        auto objArrArr_a1 = objArrArr_e0.GetArray();
        for( auto& objArrArr_e1 : objArrArr_a1 ) {
        }
        p->objArrArr.push_back(objArrArr_c1);
    }
    auto ptrObjArrArr_a0 = POM::FindArray(obj, "ptrObjArrArr");
    for( auto& ptrObjArrArr_e0 : ptrObjArrArr_a0 ) {
        std::vector<nsBS::TBaseStruct*> ptrObjArrArr_c1;
        auto ptrObjArrArr_a1 = ptrObjArrArr_e0.GetArray();
        for( auto& ptrObjArrArr_e1 : ptrObjArrArr_a1 ) {
        }
        p->ptrObjArrArr.push_back(ptrObjArrArr_c1);
    }
    auto spObjArrArr_a0 = POM::FindArray(obj, "spObjArrArr");
    for( auto& spObjArrArr_e0 : spObjArrArr_a0 ) {
        std::vector<std::shared_ptr<nsBS::TBaseStruct>> spObjArrArr_c1;
        auto spObjArrArr_a1 = spObjArrArr_e0.GetArray();
        for( auto& spObjArrArr_e1 : spObjArrArr_a1 ) {
        }
        p->spObjArrArr.push_back(spObjArrArr_c1);
    }
    auto objMapArr_a0 = POM::FindArray(obj, "objMapArr");
    for( auto& objMapArr_e0 : objMapArr_a0 ) {
        std::map<std::string,nsBS::TBaseStruct> objMapArr_c1;
        auto objMapArr_a1 = objMapArr_e0.GetObject();
        for( auto& objMapArr_e1 : objMapArr_a1 ) {
        }
        p->objMapArr.push_back(objMapArr_c1);
    }
    auto ptrObjMapArr_a0 = POM::FindArray(obj, "ptrObjMapArr");
    for( auto& ptrObjMapArr_e0 : ptrObjMapArr_a0 ) {
        std::map<std::string,nsBS::TBaseStruct*> ptrObjMapArr_c1;
        auto ptrObjMapArr_a1 = ptrObjMapArr_e0.GetObject();
        for( auto& ptrObjMapArr_e1 : ptrObjMapArr_a1 ) {
        }
        p->ptrObjMapArr.push_back(ptrObjMapArr_c1);
    }
    auto spObjMapArr_a0 = POM::FindArray(obj, "spObjMapArr");
    for( auto& spObjMapArr_e0 : spObjMapArr_a0 ) {
        std::map<std::string,std::shared_ptr<nsBS::TBaseStruct>> spObjMapArr_c1;
        auto spObjMapArr_a1 = spObjMapArr_e0.GetObject();
        for( auto& spObjMapArr_e1 : spObjMapArr_a1 ) {
        }
        p->spObjMapArr.push_back(spObjMapArr_c1);
    }
    auto objMapMap_a0 = POM::FindObject(obj, "objMapMap");
    for( auto& objMapMap_e0 : objMapMap_a0 ) {
        std::map<std::string,nsBS::TBaseStruct> objMapMap_c1;
        auto objMapMap_a1 = objMapMap_e0.value.GetObject();
        for( auto& objMapMap_e1 : objMapMap_a1 ) {
        }
        p->objMapMap.insert({ objMapMap_e0.name.GetString(), objMapMap_c1 });
    }
    auto ptrObjMapMap_a0 = POM::FindObject(obj, "ptrObjMapMap");
    for( auto& ptrObjMapMap_e0 : ptrObjMapMap_a0 ) {
        std::map<std::string,nsBS::TBaseStruct*> ptrObjMapMap_c1;
        auto ptrObjMapMap_a1 = ptrObjMapMap_e0.value.GetObject();
        for( auto& ptrObjMapMap_e1 : ptrObjMapMap_a1 ) {
        }
        p->ptrObjMapMap.insert({ ptrObjMapMap_e0.name.GetString(), ptrObjMapMap_c1 });
    }
    auto spObjMapMap_a0 = POM::FindObject(obj, "spObjMapMap");
    for( auto& spObjMapMap_e0 : spObjMapMap_a0 ) {
        std::map<std::string,std::shared_ptr<nsBS::TBaseStruct>> spObjMapMap_c1;
        auto spObjMapMap_a1 = spObjMapMap_e0.value.GetObject();
        for( auto& spObjMapMap_e1 : spObjMapMap_a1 ) {
        }
        p->spObjMapMap.insert({ spObjMapMap_e0.name.GetString(), spObjMapMap_c1 });
    }
    auto colossalMember_a0 = POM::FindObject(obj, "colossalMember");
    for( auto& colossalMember_e0 : colossalMember_a0 ) {
        std::vector<std::map<int,std::vector<std::map<int,std::map<int,std::vector<std::vector<int>>>>>>> colossalMember_c1;
        auto colossalMember_a1 = colossalMember_e0.value.GetArray();
        for( auto& colossalMember_e1 : colossalMember_a1 ) {
            std::map<int,std::vector<std::map<int,std::map<int,std::vector<std::vector<int>>>>>> colossalMember_c2;
            auto colossalMember_a2 = colossalMember_e1.GetObject();
            for( auto& colossalMember_e2 : colossalMember_a2 ) {
                std::vector<std::map<int,std::map<int,std::vector<std::vector<int>>>>> colossalMember_c3;
                auto colossalMember_a3 = colossalMember_e2.value.GetArray();
                for( auto& colossalMember_e3 : colossalMember_a3 ) {
                    std::map<int,std::map<int,std::vector<std::vector<int>>>> colossalMember_c4;
                    auto colossalMember_a4 = colossalMember_e3.GetObject();
                    for( auto& colossalMember_e4 : colossalMember_a4 ) {
                        std::map<int,std::vector<std::vector<int>>> colossalMember_c5;
                        auto colossalMember_a5 = colossalMember_e4.value.GetObject();
                        for( auto& colossalMember_e5 : colossalMember_a5 ) {
                            std::vector<std::vector<int>> colossalMember_c6;
                            auto colossalMember_a6 = colossalMember_e5.value.GetArray();
                            for( auto& colossalMember_e6 : colossalMember_a6 ) {
                                if ( colossalMember_e6.IsArray() ) {
                                    std::vector<int> colossalMember_c7;
                                    auto colossalMember_a7 = colossalMember_e6.GetArray();
                                    for( auto& colossalMember_e7 : colossalMember_a7 ) {
                                        colossalMember_c7.push_back(colossalMember_e7.GetInt64());
                                    }
                                    colossalMember_c6.push_back(colossalMember_c7);
                                } else {
                                    auto colossalMember_t7 = colossalMember_e6.GetInt64();
                                    std::vector<int> colossalMember_c7;
                                    colossalMember_c7.push_back(colossalMember_t7);
                                    colossalMember_c6.push_back(colossalMember_c7);
                                }
                            }
                            colossalMember_c5.insert({ colossalMember_e5.name.GetInt64(), colossalMember_c6 });
                        }
                        colossalMember_c4.insert({ colossalMember_e4.name.GetInt64(), colossalMember_c5 });
                    }
                    colossalMember_c3.push_back(colossalMember_c4);
                }
                colossalMember_c2.insert({ colossalMember_e2.name.GetInt64(), colossalMember_c3 });
            }
            colossalMember_c1.push_back(colossalMember_c2);
        }
        p->colossalMember.insert({ colossalMember_e0.name.GetInt64(), colossalMember_c1 });
    }
    auto intSuperMap_a0 = POM::FindObject(obj, "intSuperMap");
    for( auto& intSuperMap_e0 : intSuperMap_a0 ) {
        std::map<int,std::map<int,std::map<int,int>>> intSuperMap_c1;
        auto intSuperMap_a1 = intSuperMap_e0.value.GetObject();
        for( auto& intSuperMap_e1 : intSuperMap_a1 ) {
            std::map<int,std::map<int,int>> intSuperMap_c2;
            auto intSuperMap_a2 = intSuperMap_e1.value.GetObject();
            for( auto& intSuperMap_e2 : intSuperMap_a2 ) {
                std::map<int,int> intSuperMap_c3;
                auto intSuperMap_a3 = intSuperMap_e2.value.GetObject();
                for( auto& intSuperMap_e3 : intSuperMap_a3 ) {
                    intSuperMap_c3.insert({ std::stod(intSuperMap_e3.name.GetString()), intSuperMap_e3.value.GetInt64() });
                }
                intSuperMap_c2.insert({ intSuperMap_e2.name.GetInt64(), intSuperMap_c3 });
            }
            intSuperMap_c1.insert({ intSuperMap_e1.name.GetInt64(), intSuperMap_c2 });
        }
        p->intSuperMap.insert({ intSuperMap_e0.name.GetInt64(), intSuperMap_c1 });
    }
    auto intSuperVec_a0 = POM::FindArray(obj, "intSuperVec");
    for( auto& intSuperVec_e0 : intSuperVec_a0 ) {
        std::vector<std::vector<std::vector<int>>> intSuperVec_c1;
        auto intSuperVec_a1 = intSuperVec_e0.GetArray();
        for( auto& intSuperVec_e1 : intSuperVec_a1 ) {
            std::vector<std::vector<int>> intSuperVec_c2;
            auto intSuperVec_a2 = intSuperVec_e1.GetArray();
            for( auto& intSuperVec_e2 : intSuperVec_a2 ) {
                if ( intSuperVec_e2.IsArray() ) {
                    std::vector<int> intSuperVec_c3;
                    auto intSuperVec_a3 = intSuperVec_e2.GetArray();
                    for( auto& intSuperVec_e3 : intSuperVec_a3 ) {
                        intSuperVec_c3.push_back(intSuperVec_e3.GetInt64());
                    }
                    intSuperVec_c2.push_back(intSuperVec_c3);
                } else {
                    auto intSuperVec_t3 = intSuperVec_e2.GetInt64();
                    std::vector<int> intSuperVec_c3;
                    intSuperVec_c3.push_back(intSuperVec_t3);
                    intSuperVec_c2.push_back(intSuperVec_c3);
                }
            }
            intSuperVec_c1.push_back(intSuperVec_c2);
        }
        p->intSuperVec.push_back(intSuperVec_c1);
    }
    auto boolSuperList_a0 = POM::FindArray(obj, "boolSuperList");
    for( auto& boolSuperList_e0 : boolSuperList_a0 ) {
        std::list<std::list<std::list<bool>>> boolSuperList_c1;
        auto boolSuperList_a1 = boolSuperList_e0.GetArray();
        for( auto& boolSuperList_e1 : boolSuperList_a1 ) {
            std::list<std::list<bool>> boolSuperList_c2;
            auto boolSuperList_a2 = boolSuperList_e1.GetArray();
            for( auto& boolSuperList_e2 : boolSuperList_a2 ) {
                if ( boolSuperList_e2.IsArray() ) {
                    std::list<bool> boolSuperList_c3;
                    auto boolSuperList_a3 = boolSuperList_e2.GetArray();
                    for( auto& boolSuperList_e3 : boolSuperList_a3 ) {
                        boolSuperList_c3.push_back(boolSuperList_e3.GetBool());
                    }
                    boolSuperList_c2.push_back(boolSuperList_c3);
                } else {
                    auto boolSuperList_t3 = boolSuperList_e2.GetBool();
                    std::list<bool> boolSuperList_c3;
                    boolSuperList_c3.push_back(boolSuperList_t3);
                    boolSuperList_c2.push_back(boolSuperList_c3);
                }
            }
            boolSuperList_c1.push_back(boolSuperList_c2);
        }
        p->boolSuperList.push_back(boolSuperList_c1);
    }
}
//---------------------------------------------------------------------------------------
