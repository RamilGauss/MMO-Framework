#if 0

/*
Author: Gudakov Ramil Sergeevich a.k.a. Gauss
Гудаков Рамиль Сергеевич
Contacts: [ramil2085@mail.ru, ramil2085@gmail.com]
See for more information LICENSE.md.
*/

#include "Master.h"
#include "ControlScenario.h"
#include "BL_Debug.h"
#include "Logger.h"

#include "ManagerContextMoreDownClientConnection.h"
#include "ManagerContextDownConnection_Slave.h"
#include "ManagerContextClientLogining.h"
#include "ManagerLoginingClientsOnSlave.h"
#include "ManagerGroupClient.h"
#include "ManagerRecommutation.h"
#include "SetOrderElement.h"
#include "StatisticaClientInGroup.h"

#include "Events.h"

#include "ScenarioLoginClient.h"
#include "ScenarioLoginSlave.h"
#include "ScenarioLoginMaster.h"
#include "ScenarioFlow.h"
#include "ScenarioRecommutationClient.h"
#include "ScenarioSynchroSlave.h"
#include "ScenarioDisconnectClient.h"
#include "ScenarioSendToClient.h"

#include "ContainerContextSc.h"
#include "EnumMMO.h"
#include "SessionManager.h"

using namespace nsMMOEngine;

TMaster::TMaster()
{
  mMngContextClient.reset( new TManagerContextMoreDownClientConnection( this ) );
  mMngContextSlave.reset( new TManagerContextDownConnection_Slave( this ) );
  mMngContextClientLogining.reset( new TManagerContextClientLogining( this ) );
  mMngGroup.reset( new TManagerGroupClient );
  mSetClientKeyInQueue.reset( new TSetOrderElement );
  mStatisticaClientInGroup.reset( new TStatisticaClientInGroup );
  mMngRcm.reset( new TManagerRecommutation );
  mMngLoginingClientsOnSlave.reset( new TManagerLoginingClientsOnSlave() );

  mControlSc->mLoginClient->SetBehavior( TScenarioLoginClient::eMaster );
  mControlSc->mRcm->SetBehavior( TScenarioRecommutationClient::eMaster );
}
//-------------------------------------------------------------------------
TMaster::~TMaster()
{

}
//-------------------------------------------------------------------------
bool TMaster::TryCreateGroup( std::list<unsigned int>& clientKeyList, unsigned int& groupID )
{
  for ( unsigned int clientKey : clientKeyList )
  {
    // Клиент может и не существовать в системе 
    // спросить состоит ли клиент в группе
    if ( mMngGroup->FindIDByClientKey( clientKey, groupID ) )
    {
      TErrorEvent event;
      event.code = CreateGroup_ClientNotExist;
      AddEventCopy( &event, sizeof( event ) );
      return false;
    }
  }
  // оценка ситуации на Slave
  return EvalCreateGroupNow( clientKeyList, groupID );
}
//-------------------------------------------------------------------------
void TMaster::DestroyGroup( unsigned int groupID )
{
  unsigned int slaveSessionID;
  if ( mMngGroup->FindSessionByID( groupID, slaveSessionID ) == false )
    return;
  mStatisticaClientInGroup->DeleteBySlaveSession( slaveSessionID );
  mMngGroup->DeleteByID( groupID );
}
//-------------------------------------------------------------------------
void TMaster::LeaveGroup( unsigned int clientKey )
{
  unsigned int groupID;
  if ( mMngGroup->FindIDByClientKey( clientKey, groupID ) == false )
    return;

  unsigned int slaveSessionID;
  if ( mMngGroup->FindSessionByID( groupID, slaveSessionID ) )
    mStatisticaClientInGroup->DeleteByClientKey( slaveSessionID, clientKey );

  mMngGroup->DeleteClientKey( clientKey );
}
//-------------------------------------------------------------------------
void TMaster::GetListForGroup( unsigned int groupID, std::list<unsigned int>& clientKeyList )
{
  int countClient = mMngGroup->GetCountClientKey( groupID );

  for ( int i = 0; i < countClient; i++ )
  {
    unsigned int clientKey;
    mMngGroup->GetClientKeyByIndex( groupID, i, clientKey );
    clientKeyList.push_back( clientKey );
  }
}
//-------------------------------------------------------------------------
void TMaster::SetResultLogin( bool res, unsigned int clientSessionID,
  unsigned int clientKey, void* resForClient, int sizeResClient )
{
  TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( clientSessionID );
  if ( pC == nullptr )
    return;
  mControlSc->mLoginClient->SetContext( &pC->mLoginClient );
  if ( res == false )
  {
    // отказ
    mControlSc->mLoginClient->Reject( resForClient, sizeResClient );
    return;
  }
  // проверка на существование ключа в кластере
  unsigned int id_session_temp;
  if ( ( mMngContextClient->FindContextByClientKey( clientKey ) ) ||
    ( mMngContextClientLogining->FindSessionByClientKey( clientKey, id_session_temp ) ) )
  {
    TErrorEvent event;
    event.code = LoginClient_MasterKeyBusy;
    AddEventCopy( &event, sizeof( event ) );

    // отказ
    std::string sReject = "Reject login. Client was been authorized.";
    mControlSc->mLoginClient->Reject( (void*) sReject.data(), sReject.length() );
    return;
  }
  // связка сессии и ключа клиента
  mMngContextClientLogining->AddKeyBySession( clientSessionID, clientKey );
  // решить на какой Slave закинуть клиента
  // для Группы задан Slave, значит на него и перекидывать, но возможно он перегружен
  // навряд ли он перегружен, иначе, он самый не нагруженный, потому как только бы на него и пихали клиентов
  // а это противоречие, значит пихаем в него

  // клиент в группе?
  bool resAdd = false;
  unsigned int slaveSessionID;
  unsigned int groupID;
  bool inGroup = mMngGroup->FindIDByClientKey( clientKey, groupID );
  if ( inGroup )
    resAdd = TryAddClientByGroup( clientKey, groupID, slaveSessionID );
  else
    resAdd = TryAddClient( clientKey, slaveSessionID );
  if ( resAdd )
    AddClientBySlaveSession( clientKey, slaveSessionID, resForClient, sizeResClient );
  else
    AddInQueue( clientKey, resForClient, sizeResClient, inGroup );
}
//-------------------------------------------------------------------------
bool TMaster::FindSlaveSessionByGroup( unsigned int groupID, unsigned int& sessionID )
{
  return mMngGroup->FindSessionByID( groupID, sessionID );
}
//-------------------------------------------------------------------------
void TMaster::DisconnectInherit( unsigned int sessionID )
{
  if ( DisconnectSuperServer( sessionID ) )
    return;
  if ( DisconnectClientWait( sessionID ) )
    return;
  if ( DisconnectSlave( sessionID ) )
    return;
}
//-------------------------------------------------------------------------
int TMaster::GetCountDown()
{
  return mMngContextSlave->GetCountSession();
}
//-------------------------------------------------------------------------
bool TMaster::GetDescDown( int index, void* pDesc, int& sizeDesc )
{
  if ( sizeDesc < sizeof( TDescDownMaster ) )
  {
    GetLogger( STR_NAME_MMO_ENGINE )->
      WriteF_time( "TMaster::GetDescDown() size of buffer less then size of structure.\n" );
    return false;
  }
  unsigned int sessionID;
  if ( mMngContextSlave->GetSessionByIndex( index, sessionID ) == false )
    return false;

  TDescDownMaster* pDescDownSlave = (TDescDownMaster*) pDesc;
  pDescDownSlave->sessionID = sessionID;
  sizeDesc = sizeof( TDescDownMaster );
  return true;
}
//-------------------------------------------------------------------------
void TMaster::ConnectUp( TIP_Port& ip_port, const std::string& login, const std::string& password, unsigned char subNet )
{
  mControlSc->mLoginMaster->ConnectToSuperServer( ip_port, login, password, subNet );
}
//-------------------------------------------------------------------------
void TMaster::EndLoginMaster( IScenario* pSc )
{
  // взять по этому контексту, задать всем контекстам
  mSessionUpID = pSc->GetContext()->GetSessionID();
  mContainerUp->SetSessionID( mSessionUpID );

  if ( IsConnectUp() )
  {
    // вход в кластер закончен
    TConnectUpEvent event;
    event.sessionID = mSessionUpID;
    AddEventCopy( &event, sizeof( event ) );
  }
}
//-------------------------------------------------------------------------
void TMaster::EndLoginSlave( IScenario* pSc )
{
  auto pContext = (TContextScLoginSlave*) pSc->GetContext();
  // сохранить сессию Slave
  auto sessionID = pContext->GetSessionID();
  TContainerContextSc* pC = mMngContextSlave->FindContextBySession( sessionID );
  pC->SetSessionID( sessionID );
}
//-------------------------------------------------------------------------
void TMaster::SendDown( unsigned int sessionID, char* p, int size, bool check )
{
  TContainerContextSc* pC = mMngContextSlave->FindContextBySession( sessionID );
  if ( pC == nullptr )
    return;
  mControlSc->mFlow->SetContext( &pC->mFlow );

  SetupBP( p, size );
  mControlSc->mFlow->SendDown( mBP, check );
}
//-------------------------------------------------------------------------
void TMaster::WorkInherit()
{
}
//-------------------------------------------------------------------------
void TMaster::EndLoginClient( IScenario* pSc )
{
  // получить контекст
  TContextScLoginClient* pContextLoginClient = (TContextScLoginClient*) pSc->GetContext();
  // переместить информацию из mMngContextClientLogining в mMngContextClient
  // либо по сессии 
  unsigned int clientSessionID = pContextLoginClient->GetID_SessionClientMaster();
  // ID Клиента
  unsigned int clientKey = pContextLoginClient->GetClientKey();
  // найти сессию Slave
  unsigned int slaveSessionID = pContextLoginClient->GetID_SessionMasterSlave();
  mMngLoginingClientsOnSlave->RemoveClient( clientKey );

  TContainerContextSc* pContainer =
    mMngContextClientLogining->FindContextBySession( clientSessionID );
  // либо время вышло, либо отказали в авторизации
  if ( pContextLoginClient->IsReject() )
  {
    // удалить из списка авторизующихся
    mMngContextClientLogining->DeleteBySession( clientSessionID );
    if ( pContainer )
    {
      std::vector<unsigned int> vecID_Client;
      vecID_Client.push_back( pContextLoginClient->GetClientKey() );
      mControlSc->mDisClient->SetContext( &pContainer->mDisClient );
      pContainer->mDisClient.SetSessionID( mSessionUpID );
      mControlSc->mDisClient->DisconnectFromMaster( vecID_Client );
    }
    return;
  }
  // тут если авторизация закончилась удачно
  if ( pContextLoginClient->IsAccept() )
  {
    // удалить из списка авторизующихся
    mMngContextClientLogining->UnlinkContextBySession( clientSessionID );
    mMngContextClient->EntrustContext( clientKey, slaveSessionID, pContainer );

    // если Клиент числится в группе, то добавить в статистику
    unsigned int fakeGroupID;
    if ( mMngGroup->FindIDByClientKey( clientKey, fakeGroupID ) )
      mStatisticaClientInGroup->AddBySlaveSessionClientKey( slaveSessionID, clientKey );

    auto pLoginEvent = new TLoginEvent();
    pLoginEvent->clientKey = clientKey;
    AddEventWithoutCopy( pLoginEvent );
  }
}
//-------------------------------------------------------------------------
bool TMaster::DisconnectSuperServer( unsigned int sessionID )
{
  if ( sessionID != mSessionUpID )
    return false;

  mSessionUpID = INVALID_HANDLE_SESSION;

  TDisconnectUpEvent event;
  event.sessionID = mSessionUpID;
  AddEventCopy( &event, sizeof( event ) );
  return true;
}
//-------------------------------------------------------------------------
bool TMaster::DisconnectClientWait( unsigned int sessionID )
{
  TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( sessionID );
  if ( pC == nullptr )
    return false;

  unsigned int clientKey;
  if ( mMngContextClientLogining->FindClientKeyBySession( sessionID, clientKey ) )
  {
    // возможно клиент в очереди, удалим на всякий случай
    mSetClientKeyInQueue->RemoveByKey( clientKey );
    // закончить с Клиентом на Slave
    mControlSc->mLoginClient->SetContext( &pC->mLoginClient );
    // в EndLoginClient в случае не принятия клиента будет рассылка уведомления выше
    pC->mLoginClient.Reject();
    // в конце авторизации, если не будет принятия, то соединению выше передан пакет о уничтожении клиента
    mControlSc->mLoginClient->DisconnectFromMaster();
  }

  mMngContextClientLogining->DeleteBySession( sessionID );
  return true;
}
//-------------------------------------------------------------------------
bool TMaster::DisconnectSlave( unsigned int sessionID )
{
  if ( mMngContextSlave->FindContextBySession( sessionID ) == nullptr )
    return false;
  // составить список клиентов, которые сидели на Slave
  int countClient;
  if ( mMngContextSlave->GetCountClientKey( sessionID, countClient ) == false )
    return false;

  std::vector<unsigned int> vID_client;
  for ( int i = 0; i < countClient; i++ )
  {
    unsigned int clientKey;
    if ( mMngContextSlave->GetClientKeyByIndex( sessionID, i, clientKey ) )
      vID_client.push_back( clientKey );
  }
  // отправить SuperServer список клиентов
  if ( ( mSessionUpID != INVALID_HANDLE_SESSION ) && // если есть связь с SuperServer
    ( vID_client.size() ) )
  {
    // задать какой-то контекст
    TContainerContextSc* pC = mMngContextClient->FindContextByClientKey( vID_client[0] );
    if ( pC )
    {
      mControlSc->mDisClient->SetContext( &pC->mDisClient );
      pC->mDisClient.SetSessionID( mSessionUpID );
      mControlSc->mDisClient->DisconnectFromMaster( vID_client );
    }
  }
  for ( unsigned int clientKey : vID_client )
  {
    // если это Реципиент, то уведомить о потере Клиента
    TContainerContextSc* pC = mMngContextClient->FindContextByClientKey( clientKey );
    NotifyRecipientAboutDisconnectClient( clientKey, pC, sessionID );

    mMngContextClient->DeleteByKey( clientKey );
  }
  // !!! из групп нельзя удалять clientKey, удалять нужно группы с sessionID
  int countGroup = mMngGroup->GetCountID();
  for ( int i = 0; i < countGroup; i++ )
  {
    // перебираем все группы и ищем с sessionID
    unsigned int groupID;
    if ( mMngGroup->GetIDByIndex( i, groupID ) )
    {
      unsigned int id_session_in_group;
      if ( mMngGroup->FindSessionByID( groupID, id_session_in_group ) )
        if ( id_session_in_group == sessionID )
        {
          mMngGroup->DeleteByID( groupID );
          // 
          TDestroyGroupEvent eventDestroyGroup;
          eventDestroyGroup.groupID = groupID;
          AddEventCopy( &eventDestroyGroup, sizeof( eventDestroyGroup ) );
        }
    }
  }
  // удалить Slave
  mMngContextSlave->DeleteContextBySession( sessionID );
  mStatisticaClientInGroup->DeleteBySlaveSession( sessionID );
  // уведомить о разрыве
  TDisconnectDownEvent event;
  event.sessionID = sessionID;
  AddEventCopy( &event, sizeof( event ) );
  return true;
}
//-------------------------------------------------------------------------
bool TMaster::EvalCreateGroupNow( std::list<unsigned int>& clientKeyList, unsigned int& groupID )
{
  // ищем минимум Slave, который содержит минимум Клиентов, состоящих в группе
  unsigned int slaveSessionID;
  if ( mStatisticaClientInGroup->FindSlaveSessionByMinimumClient( slaveSessionID ) == false )
    return false;
  // определить нагрузку, которая будет в будущем на Slave, если будет меньше допустимого значения, то можно создать
  if ( LoadInFutureLessLimit( slaveSessionID, clientKeyList ) == false )
    return false;
  // создать группу
  groupID = mMngGroup->AddGroup( slaveSessionID );

  // занести в статистику
  mStatisticaClientInGroup->AddSlave( slaveSessionID );
  // все те Клиенты, которые активны и стали внутри Группы, поместить в Статистику
  for ( unsigned int clientKey : clientKeyList )
  {
    // если присутствует в системе
    if ( mMngContextClient->FindContextByClientKey( clientKey ) )
      mStatisticaClientInGroup->AddBySlaveSessionClientKey( slaveSessionID, clientKey );
    // заполнить клиентами независимо от того существуют ли они в системе
    mMngGroup->AddClientKey( groupID, clientKey );
  }
  //================================================================================
  // определить кто встанет на место этого Клиента на старом Slave
  // и заодно перенаправить этого Клиента на новый Slave
  for ( unsigned int clientKey : clientKeyList )
  {
    TContainerContextSc* pC = mMngContextClient->FindContextByClientKey( clientKey );
    if ( pC == nullptr )
    {
      unsigned int id_session_client = INVALID_HANDLE_SESSION;
      mMngContextClientLogining->FindSessionByClientKey( clientKey, id_session_client );
      pC = mMngContextClientLogining->FindContextBySession( id_session_client );
      if ( pC == nullptr )
        continue;
    }
    SolveExchangeClient( clientKey, pC, slaveSessionID );
  }
  return true;
}
//-------------------------------------------------------------------------
void TMaster::NeedContextLoginSlave( unsigned int sessionID )
{
  TContainerContextSc* pC = mMngContextSlave->FindContextBySession( sessionID );
  if ( pC )
  {
    // внутренняя ошибка
    GetLogger( STR_NAME_MMO_ENGINE )->
      WriteF_time( "TMaster::NeedContextLoginSlave() against try authorized.\n" );
    return;
  }
  pC = mMngContextSlave->AddContext( sessionID );
  mControlSc->mLoginSlave->SetContext( &pC->mLoginSlave );

  mStatisticaClientInGroup->AddSlave( sessionID );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextSynchroSlave( unsigned int sessionID )
{
  TContainerContextSc* pC = mMngContextSlave->FindContextBySession( sessionID );
  if ( pC == nullptr )
    return;
  mControlSc->mSynchroSlave->SetContext( &pC->mSynchroSlave );
}
//-------------------------------------------------------------------------
void TMaster::EndSynchroSlave( IScenario* pSc )
{
  TContextScSynchroSlave* pContextSynchroSlave = (TContextScSynchroSlave*) pSc->GetContext();
  auto slaveSessionID = pContextSynchroSlave->GetSessionID();
  mMngContextSlave->SetLoadBySession( slaveSessionID, pContextSynchroSlave->GetLoadProcent() );

  // проанализировать: если есть клиенты в очереди - проверить появилось ли место для добавления
  // место есть если при добавлении нагрузка не станет выше предела
  TryAddClientFromQueue( slaveSessionID );
}
//-------------------------------------------------------------------------
void TMaster::SendByClientKey( std::list<unsigned int>& clientKeyList, char* p, int size )
{
  SetupBP( p, size );
  mControlSc->mSendToClient->SendFromMaster( clientKeyList, mBP );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextLoginClientBySessionAfterAuthorised( unsigned int sessionID )
{
  // после авторизации Клиент получил информацию о Slave. Далее он пришлет Мастеру
  // квитанцию об этом. Значит сессию Мастер должен найти.
  TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( sessionID );
  if ( pC == nullptr )
  {
    // внутренняя ошибка
    GetLogger( STR_NAME_MMO_ENGINE )->
      WriteF_time( "TMaster::NeedContextLoginClientBySessionAfterAuthorised() context not found.\n" );
    mControlSc->mLoginClient->SetContext( nullptr );
    return;
  }
  // назначить контекст
  mControlSc->mLoginClient->SetContext( &pC->mLoginClient );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextLoginClientBySessionLeaveQueue( unsigned int sessionID )
{
  TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( sessionID );
  if ( pC )
    mControlSc->mLoginClient->SetContext( &pC->mLoginClient );// назначить контекст
  else
    mControlSc->mLoginClient->SetContext( nullptr );// сам вышел из очереди, ну и хер с ним
}
//-------------------------------------------------------------------------
void TMaster::NeedContextLoginClientBySession( unsigned int sessionID )
{
  // если это повторная авторизация, то Begin по данному контексту клиента
  // вернет false и в сценарии обработка пакета не продолжится
  TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( sessionID );
  if ( pC )
  {
    // внутренняя ошибка
    GetLogger( STR_NAME_MMO_ENGINE )->
      WriteF_time( "TMaster::NeedContextLoginClientBySession() against try authorized.\n" );
    mControlSc->mLoginClient->SetContext( nullptr );
    return;
  }
  else
  {
    pC = mMngContextClientLogining->AddContext( sessionID );
  }
  // назначить контекст
  mControlSc->mLoginClient->SetContext( &pC->mLoginClient );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextLoginClientByClientKey( unsigned int clientKey )
{
  unsigned int id_session_client;
  if ( mMngContextClientLogining->FindSessionByClientKey( clientKey, id_session_client ) )
  {
    TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( id_session_client );
    if ( pC )
      mControlSc->mLoginClient->SetContext( &pC->mLoginClient );
    else
    {
      mControlSc->mLoginClient->SetContext( nullptr );
      BL_FIX_BUG();
    }
  }
  else
  {
    mControlSc->mLoginClient->SetContext( nullptr );
    //BL_FIX_BUG();
  }
}
//-------------------------------------------------------------------------
void TMaster::NeedNumInQueueLoginClient( unsigned int sessionID )
{
  TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( sessionID );
  if ( pC == nullptr )
  {
    BL_FIX_BUG();
    return;
  }
  unsigned int clientKey;
  if ( mMngContextClientLogining->FindClientKeyBySession( sessionID, clientKey ) == false )
  {
    BL_FIX_BUG();
    return;
  }
  int index;
  if ( mSetClientKeyInQueue->GetIndex( clientKey, index ) == false )
  {
    BL_FIX_BUG();
    return;
  }
  pC->mLoginClient.SetNumInQueue( index + 1 );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextDisconnectClient( unsigned int clientKey )
{
  bool client_is_logining = false;
  unsigned int clientSessionID;
  // проверить есть ли вообще такой клиент
  TContainerContextSc* pC = mMngContextClient->FindContextByClientKey( clientKey );
  if ( pC == nullptr )
  {
    if ( mMngContextClientLogining->FindSessionByClientKey( clientKey, clientSessionID ) == false )
      return;
    pC = mMngContextClientLogining->FindContextBySession( clientSessionID );
    if ( pC == nullptr )
      return;
    client_is_logining = true;
  }
  // переслать дальше SuperServer
  if ( mSessionUpID != INVALID_HANDLE_SESSION )
  {
    std::vector<unsigned int> vecID = {clientKey};
    mControlSc->mDisClient->SetContext( &pC->mDisClient );
    pC->mDisClient.SetSessionID( mSessionUpID );
    mControlSc->mDisClient->DisconnectFromMaster( vecID );
  }
  // удалить из кластера
  if ( client_is_logining )
  {
    // удалить
    mMngLoginingClientsOnSlave->RemoveClient( clientKey );
    mMngContextClientLogining->DeleteBySession( clientSessionID );
  }
  else
  {
    unsigned int slaveSessionID;
    if ( mMngContextClient->FindSessionByClientKey( clientKey, slaveSessionID ) )
    {
      NotifyRecipientAboutDisconnectClient( clientKey, pC, slaveSessionID );
      // удалять из менеджера Групп нельзя(!), т.к. Клиента может и не быть, но он может быть в Группе
      mMngContextSlave->DeleteByClientKey( slaveSessionID, clientKey );

      // удалить из статистики
      mStatisticaClientInGroup->DeleteByClientKey( slaveSessionID, clientKey );
    }
    mMngContextClient->DeleteByKey( clientKey );
    // отправить событие удаления клиента
    nsMMOEngine::TLogoffEvent* pLogoffEvent = new nsMMOEngine::TLogoffEvent();
    pLogoffEvent->clientKey = clientKey;
    AddEventWithoutCopy( pLogoffEvent );
  }
  //### try in recv slave synchro data, 17.02.2019 Gauss TryAddClientFromQueue();
}
//-------------------------------------------------------------------------
void TMaster::EndDisconnectClient( IScenario* pSc )
{

}
//-------------------------------------------------------------------------
bool TMaster::GetRealLoadBySlave( unsigned int slaveSessionID, short& realLoad )
{
  int clientCount;
  if ( mMngContextSlave->GetCountClientKey( slaveSessionID, clientCount ) == false )
    return false;
  unsigned char load;
  if ( mMngContextSlave->FindLoadBySession( slaveSessionID, load ) == false )
    return false;
  int loginingClientCount = mMngLoginingClientsOnSlave->GetClientCountBySlave( slaveSessionID );
  return false;
  int rcmBalance = mMngRcm->GetCountClientBySessionSlave_Balance( slaveSessionID );

  float loadPerClient = eDefaultLoadPerClientIfClientCountZero;
  if ( clientCount > 0 )
    loadPerClient = ( load * 1.0f ) / clientCount;
  realLoad = load + loadPerClient * ( rcmBalance + loginingClientCount );
  return true;
}
//-------------------------------------------------------------------------
void TMaster::TryAddClientFromQueue( unsigned int slaveSessionID )
{
  TFindClientBySlaveDesc descForFind;
  descForFind.slaveSessionID = slaveSessionID;
  if ( GetRealLoadBySlave( slaveSessionID, descForFind.realLoad ) == false )
    return;
  while ( 1 )
  {
    unsigned int clientKey;
    if ( TryFindClientForAdd( descForFind ) == false )
      return;
    unsigned int clientSessionID;// для проверки
    if ( mMngContextClientLogining->FindSessionByClientKey( clientKey, clientSessionID ) == false )
    {
      BL_FIX_BUG();
      return;
    }
    TContainerContextSc* pC = mMngContextClientLogining->FindContextBySession( clientSessionID );
    if ( pC == nullptr )
    {
      BL_FIX_BUG();
      return;
    }

    void* resForClient = pC->mLoginClient.GetSaveQueueDataPtr();
    int sizeResClient = pC->mLoginClient.GetSaveQueueDataSize();
    // начали процесс авторизации
    mControlSc->mLoginClient->SetContext( &pC->mLoginClient );
    AddClientBySlaveSession( clientKey, slaveSessionID, resForClient, sizeResClient );
  }
}
//-------------------------------------------------------------------------
unsigned char TMaster::GetLimitLoadProcentByKey( unsigned int clientKey )
{
  unsigned int groupID;
  auto InGroup = mMngGroup->FindIDByClientKey( clientKey, groupID );
  return GetLimitLoadProcent( InGroup );
}
//-------------------------------------------------------------------------
unsigned char TMaster::GetLimitLoadProcent( bool InGroupOrSimple )
{
  // Решение проблемы: если клиент состоит в группе и у него произошел
  // дисконнект, то он должен войти в систему по запросу в любом случае,
  // т.е. его приоритет выше чем у других клиентов
  return InGroupOrSimple ?
    eLimitLoadProcentOnSlaveForAdd_ClientInGroup :
    eLimitLoadProcentOnSlaveForAdd;
}
//-------------------------------------------------------------------------
bool TMaster::TryAddClientByGroup( unsigned int clientKey, unsigned int groupID,
  unsigned int& slaveSessionID )
{
  if ( mMngGroup->FindSessionByID( groupID, slaveSessionID ) == false )
  {
    BL_FIX_BUG();
    return false;
  }
  unsigned char load_procent;
  if ( mMngContextSlave->FindLoadBySession( slaveSessionID, load_procent ) == false )
  {
    BL_FIX_BUG();
    return false;
  }
  if ( load_procent < GetLimitLoadProcentByKey( clientKey ) )
    return true;
  return false;
}
//-------------------------------------------------------------------------
bool TMaster::TryAddClient( unsigned int clientKey, unsigned int& slaveSessionID )
{
  unsigned char load_procent;
  if ( mMngContextSlave->FindMinimumLoad( slaveSessionID, load_procent ) == false )
  {
    // генерация ошибки
    GetLogger( STR_NAME_MMO_ENGINE )->
      WriteF_time( "TMaster::SetResultLogin() count slave = 0.\n" );
    BL_FIX_BUG();
    return false;
  }
  unsigned char limitLoadProcent = GetLimitLoadProcentByKey( clientKey );
  if ( load_procent < limitLoadProcent )
    return true;
  return false;
}
//-------------------------------------------------------------------------
void TMaster::AddClientBySlaveSession( unsigned int clientKey, unsigned int slaveSessionID,
  void* resForClient, int sizeResClient )
{
  // добавить для статистики
  mMngLoginingClientsOnSlave->AddClient( slaveSessionID, clientKey );

  // начали процесс авторизации
  mMngContextSlave->AddClientKey( slaveSessionID, clientKey );
  mControlSc->mLoginClient->Accept( clientKey, resForClient, sizeResClient,
    slaveSessionID, mSessionUpID );
}
//-------------------------------------------------------------------------
void TMaster::AddInQueue( unsigned int clientKey, void* resForClient, int sizeResClient, bool inGroup )
{
  auto type = inGroup ? TSetOrderElement::InGroup : TSetOrderElement::Simple;
  // в очередь на ожидание свободного места
  mSetClientKeyInQueue->PushBack( clientKey, type );
  int index;
  if ( mSetClientKeyInQueue->GetIndex( clientKey, index ) )
    mControlSc->mLoginClient->Queue( index + 1, resForClient, sizeResClient );
}
//-------------------------------------------------------------------------
bool TMaster::TryFindClientForAdd( TFindClientBySlaveDesc& desc )
{

/*
  TryFindClientInGroup( slaveSessionID );

  TryFindSimpleClient( slaveSessionID );


  unsigned char load_procentForSimple;
  unsigned int slaveSessionIDForSimple;
  if ( mMngContextSlave->FindMinimumLoad( slaveSessionIDForSimple, load_procentForSimple ) == false )
    return false;

  // берем первым делом клиента из группы, когда клиенты из группы закончатся - берем обычных клиентов
  auto typeQueue = TSetOrderElement::InGroup;
  while ( 1 )
  {
    auto getFirstRes = mSetClientKeyInQueue->GetFirst( clientKey, TSetOrderElement::InGroup );
    if ( getFirstRes )
    {
      switch ( typeQueue )
      {
        case TSetOrderElement::InGroup:
          typeQueue = TSetOrderElement::Simple;
          continue;
        case TSetOrderElement::Simple:
          return;
      }
    }
    unsigned int clientSessionID;
    if ( mMngContextClientLogining->FindSessionByClientKey( clientKey, clientSessionID ) == false )
    {
      mSetClientKeyInQueue->RemoveByKey( clientKey );// клиент не дождался и сам отвалился
      continue;// клиента нет, пропуск хода
    }
    // критерий верхней границы load_procent зависит от того в группе ли клиент
    switch ( typeQueue )
    {
      case TSetOrderElement::InGroup:
        // проверить - клиент все еще в группе?
        unsigned int groupID;
        if ( mMngGroup->FindIDByClientKey( clientKey, groupID ) )
        {
          // находится в группе, теперь найти сессию Slave
          if ( mMngGroup->FindSessionByID( groupID, slaveSessionID ) == false )
          {
            BL_FIX_BUG();
            return false;
          }
        }
        else// переместить из ожидающих в группе в простую очередь
          mSetClientKeyInQueue->MoveToSimple( clientKey );
        break;
      case TSetOrderElement::Simple:
        slaveSessionID = slaveSessionIDForSimple;
        //load_procent = load_procentForSimple;
        break;
    }

    auto maxLevelLoad = GetLimitLoadProcent( typeQueue == TSetOrderElement::InGroup );
    auto calculatedLoad = 0;
    if ( calculatedLoad > maxLevelLoad )
    {
      if ( typeQueue == TSetOrderElement::InGroup )
        typeQueue = TSetOrderElement::Simple;
      else
        return false;
    }
  }*/
  return false;
}
//-------------------------------------------------------------------------
bool TMaster::IsClientRecommutation( unsigned int clientKey )
{
  TContainerContextSc* pC = mMngContextClient->FindContextByClientKey( clientKey );
  if ( pC == nullptr )
    return false;
  if ( pC->IsRcmActive() )
    return true;
  return false;
}
//-------------------------------------------------------------------------
bool TMaster::LoadInFutureLessLimit( unsigned int slaveSessionID, std::list<unsigned int>& clientKeyList )
{
  unsigned char load_procent;// текущая нагрузка
  if ( mMngContextSlave->FindLoadBySession( slaveSessionID, load_procent ) == false )
    return false;
  // если нагрузки нет, то выйти
  if ( load_procent == 0 )
    return true;
  // общее кол-во клиентов на Slave
  int countAllClient;
  if ( mMngContextSlave->GetCountClientKey( slaveSessionID, countAllClient ) == false )
    return false;
  if ( countAllClient > 0 )
  {
    int countClientInGroup;// кол-во Клиентов, состоящих в Группах
    if ( mStatisticaClientInGroup->FindCountClientBySlaveSession( slaveSessionID, countClientInGroup ) == false )
      return false;
    // если кол-во добавляемых в виде Группы больше кол-ву Незанятых в Группах,
    // то значит общее кол-во не изменится, не изменится и нагрузка,
    // не изменится потому что будет произведен обмен (см. SolveExchangeClient)
    int countFreeClient = countAllClient - countClientInGroup;
    if ( int( clientKeyList.size() ) > countFreeClient )
      return true;
    int countGroupClientInFuture = countClientInGroup;
    countGroupClientInFuture += clientKeyList.size() - countFreeClient;
    float load_procent_future = ( float( load_procent )*countGroupClientInFuture ) / countAllClient;
    if ( load_procent_future > eLimitLoadProcentOnSlaveForAdd_ClientInGroup )
      return false;
  }
  return true;
}
//-------------------------------------------------------------------------
void TMaster::SolveExchangeClient( unsigned int clientKey,
  TContainerContextSc* pC_ClientInGroup, unsigned int recipientSessionID )
{
  // если текущий сценарий Клиента находится в процессе Перекоммутации,
  // то невозможно определить где он был или будет, обменивать нечего
  if ( pC_ClientInGroup->IsRcmActive() )
  {
    RcmByClientKeyContextSlaveSessionRecipient( clientKey,
      &pC_ClientInGroup->mRcm,
      recipientSessionID );
    return;
  }
  //===========================================
  // если его Slave совпадает с новым, то выйти
  unsigned int donorSessionID;
  if ( mMngContextClient->FindSessionByClientKey( clientKey, donorSessionID ) == false )
  {
    // клиент авторизуется. Может быть либо уже назначен на какой-то слэйв, либо в очереди (нет слэйва), либо не дошел до принятия решения мастером о входе в кластер
    if ( mMngContextSlave->FindSessionByClientKey( clientKey, donorSessionID ) == false )
      return;
  }
  if ( donorSessionID == recipientSessionID )
    return;
  //===========================================
  RcmByClientKeyContextSlaveSessionRecipient( clientKey, &pC_ClientInGroup->mRcm, recipientSessionID );
  //===========================================
  // Донору надо отдать от Реципиента Клиента взамен Группового
  // ищем какой именно
  int countClientOnSlaveRecipient;
  if ( mMngContextSlave->GetCountClientKey( recipientSessionID, countClientOnSlaveRecipient ) == false )
  {
    BL_FIX_BUG();
    return;
  }
  // перебор всех Клиентов Реципиента
  for ( int i = 0; i < countClientOnSlaveRecipient; i++ )
  {
    unsigned int clientKeyOnRecipient;
    if ( mMngContextSlave->GetClientKeyByIndex( recipientSessionID, i, clientKeyOnRecipient ) == false )
    {
      BL_FIX_BUG();
      return;
    }
    // он должен быть свободен, без Группы
    unsigned int groupID;
    if ( mMngGroup->FindIDByClientKey( clientKeyOnRecipient, groupID ) == false )
    {
      TContainerContextSc* pC_client_on_recipient = mMngContextClient->FindContextByClientKey( clientKeyOnRecipient );
      if ( pC_client_on_recipient == nullptr )
      {
        unsigned int id_session_client = INVALID_HANDLE_SESSION;
        mMngContextClientLogining->FindSessionByClientKey( clientKeyOnRecipient, id_session_client );
        pC_client_on_recipient = mMngContextClientLogining->FindContextBySession( id_session_client );
        if ( pC_client_on_recipient == nullptr )
        {
          BL_FIX_BUG();
          return;
        }
      }
      // если Клиент находится в процессе Перекоммутации, то он нам не подходит, ищем следующего
      if ( pC_client_on_recipient->IsRcmActive() )
        continue;
      RcmByClientKeyContextSlaveSessionRecipient( clientKeyOnRecipient, &pC_client_on_recipient->mRcm, donorSessionID );
      return;
    }
  }
}
//-------------------------------------------------------------------------
void TMaster::RcmByClientKeyContextSlaveSessionRecipient( unsigned int clientKey, TContextScRecommutationClient* pCRCM, unsigned int recipientSessionID )
{
  mControlSc->mRcm->SetContext( pCRCM );
  mControlSc->mRcm->Start( recipientSessionID, clientKey );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextSendToClient( unsigned int clientKey )
{
  TContainerContextSc* pContext = mMngContextClient->FindContextByClientKey( clientKey );
  if ( pContext )
    mControlSc->mSendToClient->SetContext( &pContext->mSendToClient );
  else
    mControlSc->mSendToClient->SetContext( nullptr );
}
//-------------------------------------------------------------------------
void TMaster::EndRcm( IScenario* pSc )
{
  TContextScRecommutationClient* pContext = (TContextScRecommutationClient*) pSc->GetContext();
  unsigned int clientKey = pContext->GetClientKey();
  mMngRcm->DeleteByClientKey( clientKey );

  // переместить с одного Slave на другой
  unsigned int recipientSessionID = pContext->GetSessionRecipient();
  bool res = mMngContextClient->SetSessionByClientKey( clientKey, recipientSessionID );
  BL_ASSERT( res );
}
//-------------------------------------------------------------------------
void TMaster::NeedContextByClientKeyRcm( unsigned int clientKey )
{
  TContainerContextSc* pC = mMngContextClient->FindContextByClientKey( clientKey );
  if ( pC )
    mControlSc->mRcm->SetContext( &pC->mRcm );
  else
    mControlSc->mRcm->SetContext( nullptr );
}
//-------------------------------------------------------------------------
void TMaster::NeedSlaveSessionDonorRcm( IScenario* pSc )
{
  TContextScRecommutationClient* pContext = (TContextScRecommutationClient*) pSc->GetContext();
  unsigned int key = pContext->GetClientKey();
  unsigned int donorSessionID;
  if ( mMngContextClient->FindSessionByClientKey( key, donorSessionID ) )
    pContext->SetSessionDonor( donorSessionID );
  else
  {
    GetLogger( STR_NAME_MMO_ENGINE )->
      WriteF_time( "TMaster::NeedSlaveSessionDonor() key = %u not found donor.\n", key );
    BL_FIX_BUG();
  }
}
//-------------------------------------------------------------------------
void TMaster::EventActivateRcm( IScenario* pSc )
{
  TContextScRecommutationClient* pContext = (TContextScRecommutationClient*) pSc->GetContext();
  unsigned int key = pContext->GetClientKey();
  unsigned int donorSessionID = pContext->GetSessionDonor();
  unsigned int recipientSessionID = pContext->GetSessionRecipient();

  mMngRcm->AddClientKey( key, donorSessionID, recipientSessionID );
}
//-------------------------------------------------------------------------
void TMaster::NotifyRecipientAboutDisconnectClient( unsigned int clientKey, TContainerContextSc* pC, unsigned int sessionID )
{
  unsigned int donorSessionID, recipientSessionID;
  if ( mMngRcm->FindSessionByClientKey( clientKey, donorSessionID, recipientSessionID ) == false )
    return;

  mMngRcm->DeleteByClientKey( clientKey );

  if ( sessionID == recipientSessionID )
    return;
  // уведомить Реципиента об удалении Клиента
  mControlSc->mRcm->SetContext( &pC->mRcm );
  mControlSc->mRcm->DisconnectClient();
}
//-------------------------------------------------------------------------

#endif
